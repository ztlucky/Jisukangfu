<template>
	<view class="page">
		 <view class="" style="position: relative;width: 750rpx;" 
		 :style="{height: systemInfo.screenHeight + 'px'}" v-if="start == '2'">
		 	<live-pushers  ref="live-push" :push_url="liveurl"></live-pushers>
		 	<live-head @back="closeLive" ref="live-head" 
			:headimgurl="headimgurl" 
			:nickname="name" 
			:onlineCount="onlineCount"
			:time = "totallivetime"
			:room_id="liveId"
		 	 :style="{'margin-top':systemInfo.statusBarHeight+ 'px'}"
			 ></live-head>
		 	<view class="" style="width: 100rpx;height: 100rpx;background-color: #007AFF;"
			 @tap="loginSocket" v-if="false"></view>
		 	<view class="" style="bottom: 40;position: absolute;width: 750rpx;">
		 		<live-msg ref="live-msg"></live-msg>
 		 		 <!-- <live-menu :room_id="room_id"></live-menu> -->
				 <view class="playbtn" :style="[{width:viewWidth +'px'}]" 
				  @click="clickplayBtn" >
   				  <image  :src="isplay == true? 
				  '../../../static/zhibo/icon_tingzhizhibo.png'
				  :'../../../static/zhibo/icon_kaishizhibo.png'"   class="playbtnimage"  
				   ></image>
				 			   
				 			   
				 </view>
				 <image src="../../../static/zhibo/icon_fanzhuangjingtou.png"
				  class="cameraBtn" mode="" @click="switchCamera"></image>
		 	</view>
		 </view>
			 
			  
		      
	</view>
 
</template>

<script>
  	import LivePushers from '../../../components/live/live-pushers.vue';//直播推流
	import LiveHead from '../../../components/live/live-head.vue';
	import LiveMsg from '@/components/live/live-msg.vue';
	import {
		mapState
	} from 'vuex';
 	var socketLive = null;
 	var timer;
 	
	export default {
		components:{
			LivePushers,
			LiveHead,
			LiveMsg,
		},
		data() {
			return {
				start: 2,
				liveId:'',//直播的ID
			    name:"",
			    headimgurl:'',
				streamName:'',//流名称，根据流名称获取直播推流地址
				liveurl:'',
				viewHeight:'0',
				viewWidth:'0',
				isplay:false,//是否开始直播
				totallivetime:'',
				secondNumber:0,//直播秒数
				onlineCount:0
				 
			}
		},
		 
		onLoad:function(option){
			console.log(option)
			if(uni.getStorageSync("headurl").length>0){
				this.headimgurl = uni.getStorageSync("headurl")
				
			}else{
				this.headimgurl = "../../../static/wodehuanzhe/img_touxiang.png"
			}
 			
			if (option.item != null) {
 			
				let objClone = JSON.parse(decodeURIComponent(option.item))
				this.streamName = objClone.streamName
				this.liveId = objClone.liveid
				this.name = objClone.title;
				 
			}
 			this.loadLiveurl()
			this.connectSocket()

		},
		computed: {
			...mapState([
				'systemInfo','user'
			]),
		},
		onShow() { 	
			 
		 
		},
		 onReady() {
			 uni.setKeepScreenOn({
			 	keepScreenOn: true
			 });//保持屏幕常亮
		            // 注意：需要在onReady中 或 onLoad 延时
		           // this.context = uni.createLivePusherContext("livePusher", this);
					var that = this;
					
					uni.getSystemInfo({
					    success: function (res) {
					    that.viewHeight = res.windowHeight; 
						that.viewWidth = res.windowWidth
					    }
					});
		        },
				onUnload() {
					uni.$off('updateLiveSwitchCamera');
					if (socketLive) {
						socketLive.close();
					}
				},
				onResize() {
					console.log("fffff")
					uni.getSystemInfo({
					    success: function (res) {
					   if (res.windowWidth > res.windowHeight) {  
					                           console.log('横屏');  
					                       } else {  
					                           console.log('竖屏');  
					                       }  
					    }
					});
				},
				onBackPress() {
					this.stopLive()
					return true
				},
		methods: {
			addtime(){
				this.secondNumber ++
				 var theTime = this.secondNumber; // 秒
				  // 时
				 
				  var HH =  theTime /  3600;
				
				  // 分
				 
				  var mm = theTime %  3600 / 60;
				 
				  // 秒
				 
				  var SS = theTime %  60;
				   var  secStr =""   ; 
					   var  mmStr =""   ;
					   var  hhStr =""   ;
					   
					   
				if(parseInt(SS)<10){
					secStr = "0"+parseInt(SS).toString()
				}else{
					secStr =  parseInt(SS)
				}
					
				if(parseInt(mm)<10){
					mmStr = "0"+parseInt(mm)
				}else{
					mmStr = parseInt(mm)
					
				}
				if(parseInt(HH)<10){
					hhStr = "0"+parseInt(HH)
				}else{
					hhStr = parseInt(HH)
					
				}
				this.totallivetime =hhStr+":"+mmStr+ ":"+secStr
			},
			addSecondNumber(){
				setInterval(() => {
					this.addtime();
					
					//this.addSecondNumber();
				},   1000)
				
			},
			//返回
						returnAction(){
							 //退出直播
							 this.stopLive()
							 
						},
						clickplayBtn(){
							if(this.isplay == false){
								this.loadLiveurl()
								this.isplay = true
							}else{
								this.stopLive()
 								
							}
						},
						//链接soket
	connectSocket: function() {
		var that = this
		console.log(getApp().globalData.userId)
		socketLive = uni.connectSocket({
			
			url: "http://3237632k3k.goho.co/jeecg-boot/webSocket/"+getApp().globalData.userId,
			header: {},
			success: () => {
				console.log("connectSocket:初始化成功");
			},
			fail: (err) => {
				console.log("connectSocket:初始化失败");
				
				console.err(err);
			},
			complete: () => {}
		});
		uni.onSocketOpen(function(res){
			      console.log('WebSocket连接已打开！');

		})
		  uni.onSocketError(function (res) {
			  console.log(res);
			  
		      console.log('WebSocket连接打开失败，请检查！');
		    });
		socketLive.onOpen((res) => {
			console.log("打开连接成功");
			var data = JSON.stringify({
				event: "live",
				data: {
					type: 'login',
					token: uni.getStorageSync('token'),
				}
			});
			socketLive.send({
				// data: data,
				success: (res) => {
					console.log("直播间连接成功", res);
					let el = this.$refs['live-msg'];
					var ms = {
						uid:getApp().globalData.userId,
						nickname:getApp().globalData.name,
						content:"直播间连接成功"
					}
					 
					console.log(el)
					if (el) {
						el.addMsg(ms);
					}
					timer = setInterval(() => {
						uni.sendSocketMessage({
 							success: () => {
 							}
						});
					}, 2 * 1000);
				}
			})
		});
		socketLive.onMessage((res) => {
		
 			console.log("收到消息", res);
			var data = JSON.parse(res.data);
			console.log(data.type)
			if (data.type == 'ZB78965') {
				
				let el = this.$refs['live-msg'];
				var ms = {
					uid:data.id,
					nickname:data.sendUser.name,
					content: data.content
				}
				 
				console.log(el)
				if (el) {
					el.addMsg(ms);
				}
			}
			if (data.type == 'LP244') {
				//直播人数
				console.log(data)
				
				that.onlineCount =  data.content
				console.log(data)
 			}
			if (data.type == 'room-betting') {
				console.log("下注消息");
				this.addRoomMsg(data.data);
			}
			if (data.type == 'room-gift') {
				this.addRoomMsg(data.data);
			}
			if (data.type == 'room-back') {
				this.updateRoomOnline();
			}
			if (data.type == 'room-end') {
				this.closeLive();
			}
			if (data.type == 'ping') {
				//发送心跳
			}
		});
		socketLive.onClose((res) => {
			console.log("直播间onClose");
		})
		socketLive.onError((res) => {
			console.log(res);
			
 		})
	},					
					//获取推流地址
loadLiveurl(){
 			 
			       uni.showLoading({
			 	 title: "加载中",
			 	 mask: true
			        });
 										var that = this;
										uni.request({
											url: getApp().globalData.BaseUrl+"/live/live/getPushUrl" ,
											data: {
												'流名称': this.streamName
												 
											},
											method: 'GET',
											dataType: 'json',
											success: res => {
												uni.hideLoading();
												
 												console.log(res.data)						
												if (res.data.code ==200) {
												   that.liveurl =  res.data.result;
												   let el = that.$refs['live-push'];
												   el.playLive()
  												 that.isplay = true
												}
											},
											fail: res => {	
												uni.hideLoading();
												
											},
											complete: res => {
												uni.hideLoading();
												
											}
										})
										 
									},
									//修改直播状态开始直播
									startLiveStatus(){
										console.log("直播已开始")
										
										var that = this;
										uni.request({
											url: getApp().globalData.BaseUrl+"/live/live/startLive",
											data: {
												live_id:this.liveId
												 
											},
											method: 'GET',
											dataType: 'json',
											success: res => {
												
												if (res.data.code ==200) {
												   that.isplay =  true;
												   that.addSecondNumber()
												   console.log(res)
 												 uni.showToast({
												 	title:'直播已开始',
													icon:'none'
												 })
												}
											},
											fail: res => {
 												
											},
											complete: res => {
												
											}
										});
									},
									//修改直播状态结束直播
									endLiveStatus(){
										console.log(this.liveId)
										var that = this;
										uni.request({
											url: getApp().globalData.BaseUrl+'live/live/stopLive',
											data: {
												live_id: this.liveId
												 
											},
											method: 'GET',
											dataType: 'json',
											success: res => {
												console.log(res)
											
												if (res.data.code ==200) {
													that.isplay = false
 													
													that.$set(res.data.result,'time',that.totallivetime)
												   uni.redirectTo({
												   	url:'../EndLive/EndLive?item='+encodeURIComponent(JSON.stringify(res.data.result)),
												   	animationDuration:'300',
												   	animationType:'slide-in-right'
												   }); 
												  
												}
											},
											fail: res => {
											},
											complete: res => {
											}
										});
									},
			
 
			         	//结束直播
						stopLive(){
							if(this.isplay == true){
								var that = this;
								uni.showModal({
									title: "提示",
									content: '确认结束该直播？',
									success: function(e) {
										if (e.confirm) {
 											
								          that.stop()
										} else if (e.cancel) {
 								
										}
									}
								})
							}else{
								uni.navigateBack({
									
								})
								uni.showToast({
									title:'直播已结束',
									icon:'none',
																					
								})
							}
						},
			         stop: function() {
						 console.log("stop")
						 var that = this;
						 
 					  that.endLiveStatus()
			       },
//切换摄像头
			    switchCamera: function() {
			                uni.$emit('updateLiveSwitchCamera', {
			                	 
			                });
			            },
			            // startPreview: function() {
			            //     this.context.startPreview({
			            //         success: (a) => {
			            //             console.log("livePusher.startPreview:" + JSON.stringify(a));
			            //         }
			            //     });
			            // },
			            // stopPreview: function() {
			            //     this.context.stopPreview({
			            //         success: (a) => {
			            //             console.log("livePusher.stopPreview:" + JSON.stringify(a));
			            //         }
			            //     });
			            // }
		}
	}
</script>

<style scoped >
 .returnBtn{
	 position: fixed;
	 top: 80rpx;
	 left: 40rpx;
	 width: 40rpx;
	 height: 40rpx;
  }
		.playbtn{
			width: 360px;
  			position: fixed;
 			z-index: 1000000;
			display:flex;
			bottom: 50rpx;
			flex-direction:column;
			align-items:center;
		}
		.playbtnimage{
			width: 88rpx;
			height: 88rpx;
 		}
	
		.playbtntext{
			font-size: 28rpx;
			color: #FFFFFF;
			margin-top: 10rpx;
		}
	 	 
  .cameraBtn{
	  width: 66rpx;
	  height: 66rpx;
 	 position: fixed;
 	 z-index: 1000000;
 	 display:flex;
 	 bottom: 50rpx;
	 right:160rpx ;
  }
	
</style>
